service: StepFuncBatchTest

frameworkVersion: ">=1.2.0 <2.0.0"

provider:
  name: aws
  region: us-east-1
  runtime: python3.6
  memorySize: 128
  timeout: 10

package:
  exclude:
    - node_modules/**

functions:
  branch:
    handler: index.handlerBranch
  map:
    handler: index.handlerMap
  reduce:
    handler: index.handlerReduce


stepFunctions:
  stateMachines:
    HelloWorldStepFunction:
      events:
        - http:
            path: startFunction
            method: GET
      name: ${self:service}-StepFunction
      definition:
        StartAt: StartStepF
        States:
          StartStepF:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-map
            Next: BatchStep
          BatchStep:
            Type: Task
            Resource: arn:aws:states:::batch:submitJob.sync
            Parameters:
              JobName: TestStep
              JobDefinition: "#{JobDefinition}"
              JobQueue: "#{JobQueue}"
              ContainerOverrides:
                Command:
                  - 'app/exec'
            Next: Parallel
          Parallel:
            Type: Parallel
            Next: EndStepF
            Branches:
              - StartAt: Branch1
                States:
                  Branch1:
                    Type: Task
                    Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-branch
                    End: True
              - StartAt: Branch2
                States:
                  Branch2:
                    Type: Task
                    Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-branch
                    End: True
          EndStepF:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-reduce
            End: true

plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters

resources:
  Resources:
    ComputeEnvironment:
      Type: AWS::Batch::ComputeEnvironment
      Properties:
        Type: MANAGED
        # ServiceRole: !Ref AWSBatchServiceRole
        ServiceRole: AWSBatchServiceRole
        ComputeEnvironmentName: '#{AWS::StackName}-ComputeEnvironment'
        ComputeResources:
          MaxvCpus: 128
          SecurityGroupIds:
            - !Ref BatchSecurityGroup
          Type: EC2
          # Type: SPOT
          SpotIamFleetRole: !GetAtt EC2SpotFleetTaggingRole.Arn
          Subnets:
            - !Ref PublicSubnet1
          MinvCpus: 0
          InstanceRole: !Ref ECSInstanceRole
          InstanceTypes:
            - c5.large
            # - p2.xlarge
          Tags: {"Name": "Batch Instance - #{AWS::StackName}"}
          DesiredvCpus: 0
        State: ENABLED
    JobQueue:
      Type: AWS::Batch::JobQueue
      Properties:
        ComputeEnvironmentOrder:
          - Order: 1
            ComputeEnvironment: !Ref ComputeEnvironment
        State: ENABLED
        Priority: 1
        JobQueueName: '#{AWS::StackName}-JobQueue'
    JobDefinition:
      Type: "AWS::Batch::JobDefinition"
      Properties:
        Type: Container
        ContainerProperties: 
          Command: 
            - ls
          Image: 'ryfeus/test-aws-ecr:latest'
          Memory: 128
          Vcpus: 1
          # Memory: 60000
          # Vcpus: 4
          # ResourceRequirements:
          #   - Type: 'GPU'
          #     Value: 1
        JobDefinitionName: '#{AWS::StackName}-JobDefinition'
        RetryStrategy: 
          Attempts: 1
    PubPrivateVPC:
      Type: 'AWS::EC2::VPC'
      Properties:
        CidrBlock: 172.31.0.0/16
        Tags:
          - Key: Name
            Value: !Join [_, [!Ref 'AWS::StackName']]
    PublicSubnet1:
      Type: 'AWS::EC2::Subnet'
      Properties:
        VpcId: !Ref PubPrivateVPC
        AvailabilityZone: '#{AWS::Region}a'
        CidrBlock: 172.31.48.0/20
        MapPublicIpOnLaunch: true
    InternetGateway:
      Type: 'AWS::EC2::InternetGateway'
      Properties:
        Tags:
          - Key: Name
            Value: !Join [_, [!Ref 'AWS::StackName']]
          - Key: Network
            Value: Public
    GatewayToInternet:
      Type: 'AWS::EC2::VPCGatewayAttachment'
      Properties:
        VpcId: !Ref PubPrivateVPC
        InternetGatewayId: !Ref InternetGateway
    PublicRouteTable:
      Type: 'AWS::EC2::RouteTable'
      Properties:
        VpcId: !Ref PubPrivateVPC
        Tags:
          - Key: Network
            Value: Public
    PublicRoute:
      Type: 'AWS::EC2::Route'
      DependsOn: GatewayToInternet
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway
    PublicSubnet1RouteTableAssociation:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: !Ref PublicSubnet1
        RouteTableId: !Ref PublicRouteTable
    BatchSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow all ports
        VpcId:
          Ref: PubPrivateVPC
    EC2SpotFleetTaggingRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: EC2SpotFleetTaggingRole
        AssumeRolePolicyDocument:
          Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'spotfleet.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
        Path: /service-role/
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole
    AWSBatchServiceRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: AWSBatchCustomServiceRole
        AssumeRolePolicyDocument:
          Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'batch.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
        Path: /service-role/
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole
    ECSInstanceRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ECSInstanceProfileRole
        AssumeRolePolicyDocument:
          Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
        Path: /service-role/
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
    ECSInstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties: 
        InstanceProfileName: ECSInstanceProfileRole
        Roles: 
          - !Ref ECSInstanceRole
